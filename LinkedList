List of elements called nodes are connected together in single file line

2 types of linked list - Singly Linked List and Doubly Linked List

Singly - Each node has reference to next node
Doubly - Each node has refernece to next as well as previous node

Need to know about 2 nodes to make it function i.e., Head Node and Tail Node

//Linkedlist code

//initial there will be no node
function LinkedList(){
    this.head = null;
    this.tail = null;
}

function Node(value, next, prev){
    this.value = value;
    this.next = next;
    this.prev = prev;
}

var LL = new LinkedList(); //{head: null, tail : null}
var userList = new LinkedList(); //each instances are new linked list

var node1 = new Node(100, 'node2', null);
{value: 100, next: 'node2', prev: null}

LinkedList.prototype.addToHead = function(value){
    var newNode new Node(value, this.head, null);
    if(this.head){
        this.head.prev = newNode;
    }else{
        this.tail = newNode;
    }
    this.head = newNode;
}

var ll = new LinkedList();
ll.addToHead(100);

{
    head: {value: 100, next: null, prev: null},
    tail: {value: 100, next: null, prev: null}
}

ll.addToHead(200);

{
    head: {
        value: 200,
        next: {value: 100, next: null, prev: [Circular]},
        prev: null
    },
    tail: {
        value: 100,
        next: null,
        prev: {value: 200, next: [Circular], prev: null}
    }
}

LinkedList.prototype.addToTail = function(value){
    var newNode = new Node(value, null, this.tail);
    if(this.tail){
        this.tail.next = newNode;
    }else{
        this.head = newNode;
    }
    this.tail = newNode;
}

myLL.addToTail(10);
myLL.addToTail(20);
myLL.addToTail(30);
myLL.addToHead(100);

{
    head: {
        value: 100,
        next: {value: 10, next: [Object], prev: [Circular]},
        prev: null
    },
    tail: {
        value: 30,
        next: null,
        prev: {value: 20, next: [Circular], prev: [Object]}
    }
}

LinkedList.prototype.removeHead = function(){
    if(!this.head){
        return null;
    }
    var val = this.head.value;
    this.head = this.head.next;
    if(this.head){
        this.head.prev = null;
    }else{
        this.tail = null;
    }
    retutn val;
}

ll.removeHead(); //value only

LinkedList.prototype.removeTail = function(){
    if(!this.tail){
        return null;
    }
    var val = this.tail.value;
    this.tail = this.tail.prev;
    if(this.tail){
        this.tail.next = null;
    }else{
        this.head = null;
    }
    return val;

}